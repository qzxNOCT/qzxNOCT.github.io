<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Codeforces Round 903(Div.3)_D(prolemset 1886c)</title>
      <link href="/2023/11/16/Codeforces%20Round%20905%20(Div.%203)E/"/>
      <url>/2023/11/16/Codeforces%20Round%20905%20(Div.%203)E/</url>
      
        <content type="html"><![CDATA[<h1 id="Codeforces-Round-905-Div-3-E-prolemset-1883E"><a href="#Codeforces-Round-905-Div-3-E-prolemset-1883E" class="headerlink" title="Codeforces Round #905(Div.3)_E(prolemset 1883E)"></a>Codeforces Round #905(Div.3)_E(prolemset 1883E)</h1><h2 id="link-Problem"><a href="#link-Problem" class="headerlink" title="link: Problem"></a>link: <a href="https://codeforces.com/problemset/problem/1883/E">Problem</a></h2><hr><h2 id="background"><a href="#background" class="headerlink" title="background:"></a>background:</h2><p>&ensp;&ensp;&ensp;&ensp;It has been a long time since I last wrote a blog here, due to an off-line contest and then the mid-term </p><p>examination and a sick amount of homework.</p><p>It makes me very nervous. But at least now I have free to write something. </p><p>This is a problem about Doubling and Differential. However, when I wrote down this, I ignored that it would be out of data range.</p><p>So I just thought about writing a Doubling algorithm, didn’t think about Differential algorithm, and wa for so many times. Oh, every</p><p>time when I write div3, it’s easier to lose rating than div2, makes me really sad.</p><hr>  <span id="more"></span><h2 id="meaning"><a href="#meaning" class="headerlink" title="meaning:"></a>meaning:</h2><p> &ensp;&ensp;&ensp;&ensp;Give you an array of integers, and you can do an operation for many times–choose one integer and multiply it by 2. </p><p> Util the array becoming a non-decreasing array, what’s the minimum number of operations.</p><hr><p>  time limit: 1s</p><p>  memory limit: 256M</p><p>  data range: </p><ol><li>test cases: 1e4</li><li>nums: 1e5</li><li>elements: 1e9</li></ol><hr><h2 id="solution"><a href="#solution" class="headerlink" title="solution:"></a>solution:</h2><p>&ensp;&ensp;&ensp;&ensp;It’s easy to know that we can traverse every integers of the array, comparing it to its previous integer. If it’s less</p><p>than the previous, than multiply it by 2^k, k could be 1~30, util it’s not smaller than the previous, break. Then count the total counts.</p><p>Here is my initial code, just a simple Doubling algorithm, it’s easy to understand.</p><p><em><strong>Doubling algorithm:</strong></em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">ll t, n;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">     cin&gt;&gt;n;</span><br><span class="line">     <span class="function">vector&lt;ll&gt; <span class="title">v</span><span class="params">(n+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i&lt;=n; i++) cin&gt;&gt;v[i];</span><br><span class="line">     ll sum = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line">     &#123;</span><br><span class="line">     <span class="keyword">if</span>(v[i]&gt;=v[i<span class="number">-1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j&lt;=<span class="number">30</span>; j++)</span><br><span class="line">     &#123;</span><br><span class="line">     <span class="keyword">if</span>((v[i] * (<span class="number">1</span>&lt;&lt;j))&gt;=v[i<span class="number">-1</span>])</span><br><span class="line">     &#123;</span><br><span class="line">     v[i] *= (<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">     sum+=j;</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     cout&lt;&lt;sum&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    ll t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;&ensp;&ensp;However, if each integer is big and for each a<sub>i-1</sub> - a<sub>i</sub> is always equal to 1, we should multiply </p><p>it for so many times, it’s really terrible. So we should choose to use the Differential algorithm.</p><p>Here is the AC code:</p><p><em><strong>Doubling algotithm and Differential algorithm</strong></em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">ll t,n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="function">std::vector&lt;ll&gt; <span class="title">v</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i&lt;=n; i++) cin&gt;&gt;v[i];</span><br><span class="line">ll sum = <span class="number">0</span>, cnt = <span class="number">0</span>; <span class="comment">//sum is the total numbers of operation, and cnt is that the present integer should be multiply by 2^cnt.</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line">&#123;</span><br><span class="line">       <span class="keyword">if</span>(v[i]&lt;v[i<span class="number">-1</span>])</span><br><span class="line">       &#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j&lt;=<span class="number">30</span>; j++)</span><br><span class="line">          &#123;</span><br><span class="line">          <span class="keyword">if</span>(v[i]*(<span class="number">1ll</span>&lt;&lt;j)&gt;=v[i<span class="number">-1</span>])</span><br><span class="line">          &#123;</span><br><span class="line">          cnt+=j;<span class="comment">//if the present integer is smaller than the previous, it should be more mutiply by 2^j on the basis of its previous. </span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">       &#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j&lt;=<span class="number">30</span>; j++)</span><br><span class="line">         &#123;</span><br><span class="line">         <span class="keyword">if</span>(v[i<span class="number">-1</span>]*(<span class="number">1ll</span>&lt;&lt;j)&gt;v[i])</span><br><span class="line">         &#123;</span><br><span class="line">                cnt-=(j<span class="number">-1</span>);<span class="comment">//if the present integer is bigger than the previous, it should be less mutiply by 2^(j-1) on the basis of its previous.</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(cnt&lt;<span class="number">0</span>) cnt = <span class="number">0</span>;<span class="comment">//if it&#x27;s much bigger than previous, it should not change instead of dividing. </span></span><br><span class="line">       sum+=cnt;<span class="comment">//record every cnt, it&#x27;s the minimum numbers of operation.</span></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;sum&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Doubling </tag>
            
            <tag> Differential </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 903(Div.3)_D(prolemset 1886c)</title>
      <link href="/2023/10/22/Codeforces%20Round%20903%20(Div.%203)D/"/>
      <url>/2023/10/22/Codeforces%20Round%20903%20(Div.%203)D/</url>
      
        <content type="html"><![CDATA[<h1 id="Codeforces-Round-903-Div-3-D-prolemset-1886c"><a href="#Codeforces-Round-903-Div-3-D-prolemset-1886c" class="headerlink" title="Codeforces Round #903(Div.3)_D(prolemset 1886c)"></a>Codeforces Round #903(Div.3)_D(prolemset 1886c)</h1><h2 id="link-Problem"><a href="#link-Problem" class="headerlink" title="link: Problem"></a>link: <a href="https://codeforces.com/contest/1881/problem/D">Problem</a></h2><hr><h2 id="background"><a href="#background" class="headerlink" title="background:"></a>background:</h2><p>&ensp;&ensp;&ensp;&ensp;WA for once, and TLE for fifth, lead to my rating decreased. It’s a </p><p>good chance for me here to review the knowledge point of Sieve method.</p><hr>  <span id="more"></span><h2 id="meaning"><a href="#meaning" class="headerlink" title="meaning:"></a>meaning:</h2><p> &ensp;&ensp;&ensp;&ensp;Given an integer array, every integer of it can be divided into the</p><p>  product of multiple integers, and use these numbers which were  </p><p>  decomposed to multiply by some other numbers of this array.</p><p>  You can do it for many times, and find whether you can make all of </p><p>  them become the same.</p><hr><p>  time limit: 2s</p><p>  memory limit: 256M</p><p>  data range: </p><ol><li>test cases: 2000</li><li>nums: 1e4</li><li>elements: 1e6</li></ol><hr><h2 id="solution"><a href="#solution" class="headerlink" title="solution:"></a>solution:</h2><p>&ensp;&ensp;&ensp;&ensp;First, we can get an idea that if decomposing every integer of this </p><p>array into many prime nums, and the counts of every prime num can be</p><p>divided evenly by the size of array, we can say that we could share </p><p>equivalent prime number with all nums of the array. If all of them </p><p>satisfied ,we write down <strong>YES</strong>, else if we find one of it not </p><p>satisfied, we write down <strong>NO</strong>.</p><p>There comes a classic problem, how to divide every integers into </p><p>different prime num?</p><p>First, we think it might be a seive method, I used to write </p><p><em><strong>sevie of Eratosthenes:</strong></em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment">//to avoid init prime array, we define prime[i] = 0 </span></span><br><span class="line">       <span class="comment">//to represent prime number </span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(!prime[i])</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> j = i*i; j&lt;=n; j++)</span><br><span class="line">           &#123;</span><br><span class="line">               prime[j] = <span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;&ensp;&ensp;Many times it wouldn’t be time exceed limited. However, to avoid this possibility, </p><p>we choose</p><p><em><strong>sevie of Euler:</strong></em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_prime</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//The number which is not visited is prime number,and</span></span><br><span class="line">        <span class="comment">//this time we could maintain an array to save the prime num. </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!vis[x]) prime[++cnt] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; prime[j]&lt;=n/i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[prime[j] * i] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Each sevie is to mutiply each num added </span></span><br><span class="line">            <span class="comment">//to the array by the numbers in the current(include itself)  </span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i%prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//i%prime[j] == 0 means i could be divided into smaller prime number,</span></span><br><span class="line">            <span class="comment">//and the numbers after could also be the same, </span></span><br><span class="line">            <span class="comment">//so when we traverse here, </span></span><br><span class="line">            <span class="comment">//we could stop to prepare for the next turn. This is the key of </span></span><br><span class="line">            <span class="comment">//total algorithm, which make sure that the division would always be </span></span><br><span class="line">            <span class="comment">//the minimum division.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;&ensp;&ensp;Now we go back to the topic, we should find how many prime numbers make up all</p><p>the nums in the array.There also exist a problem, how can we count the number of times?</p><p>I think it for a long time but didn’t get an idea, I tried brute force to record </p><p>the data each time, and cleared the record array, however, got TLE.</p><p>&ensp;&ensp;&ensp;&ensp;After contest, I saw the codes in the top rank and get some ideas.</p><p>&ensp;&ensp;&ensp;&ensp;First, we talked that the sevie of Euler could make sure that the division would always </p><p>be the minimum division. So we can change visit array(which only record if it’s visted)</p><p>into memorized array, so it can memorize its “father” number. Just divide it, the count of</p><p>“father” number plus one. Do it util it becomes 1, so this number’s prime count is </p><p>finished,  in this way, we don’t need to traverse the prime array for many times.</p><p>&ensp;&ensp;&ensp;&ensp;Second, we could use a vector or a map to store which prime</p><p>numbers are calculating this time, in the end of this test case we just redefine the</p><p>cnt[calnum], so we don’t need to remake cnt array. Its 1e6 size makes it really </p><p>horrible.</p><p>&ensp;&ensp;&ensp;&ensp;Follow these two steps, we could solve this problem successful.</p><p>Here is the AC code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> <span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"> ll n, num;</span><br><span class="line"> <span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>+<span class="number">2</span>;</span><br><span class="line"> std::vector&lt;ll&gt; v, prime;</span><br><span class="line"> ll cnt[N];</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">prime.<span class="built_in">clear</span>();</span><br><span class="line">v.<span class="built_in">assign</span>(n+<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">   <span class="keyword">for</span>(ll i = <span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="keyword">if</span>(!v[i])  </span><br><span class="line">     &#123;</span><br><span class="line">     v[i] = i;<span class="comment">//let the father of prime number be itself</span></span><br><span class="line">     prime.<span class="built_in">push_back</span>(i);</span><br><span class="line">     &#125;</span><br><span class="line">   <span class="keyword">for</span>(ll j = <span class="number">0</span>; prime[j]*i&lt;=n; j++)</span><br><span class="line">   &#123;</span><br><span class="line">        <span class="comment">//let the father of composite num be the minimum prime number which </span></span><br><span class="line">        <span class="comment">//can be divided by it</span></span><br><span class="line"></span><br><span class="line">        v[prime[j] * i] = prime[j];</span><br><span class="line">        <span class="keyword">if</span>(prime[j] == v[i]) <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">   cin&gt;&gt;n;</span><br><span class="line">   ll tmp = n;</span><br><span class="line">   vector&lt;ll&gt;sta;<span class="comment">//to store the prime numbers which are calculating this time </span></span><br><span class="line">   ll c;</span><br><span class="line">   <span class="keyword">while</span>(n--)</span><br><span class="line">   &#123;</span><br><span class="line">  cin&gt;&gt;c;</span><br><span class="line">  <span class="keyword">while</span>(c&gt;<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">     sta.<span class="built_in">push_back</span>(v[c]);</span><br><span class="line">     cnt[v[c]]++;</span><br><span class="line">     c/=v[c];</span><br><span class="line">  &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   ll fl = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">auto</span> num:sta)</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="comment">//if one of the prime number couldn&#x27;t divided evenly, let fl = -1,</span></span><br><span class="line">     <span class="comment">//and don&#x27;t break, because we should set the calculating prime number to 0</span></span><br><span class="line">  <span class="keyword">if</span>(cnt[num]%tmp != <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  fl = <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  cnt[num] = <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(fl == <span class="number">-1</span>) cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">   <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">   ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">   std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">   ll t;</span><br><span class="line">   <span class="built_in">init</span>(N);</span><br><span class="line">   cin &gt;&gt; t;</span><br><span class="line">   <span class="keyword">while</span> (t--) </span><br><span class="line">   &#123;</span><br><span class="line">     <span class="built_in">solve</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Sevie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/10/20/hello-world/"/>
      <url>/2023/10/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
